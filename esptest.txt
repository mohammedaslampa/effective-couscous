#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>

#include "index.h"                      //Our HTML webpage contents with javascripts


int tank0,tank1,tank2,t,error;                       //for u.s sensor reading
String M0="OFF",M1="OFF", M2="OFF",M3="OFF",t_state="0";                          //for storing motor status
const int L0=2,L1=0,L2=12,L3=14;               //motor pin connected to relay and scr
unsigned long previousMillis = 0;        // will store last time LED was updated
const long interval = 1000;           // interval at which to blink (milliseconds)

//SSID and Password of your WiFi router
const char* ssid = "BSNL_AP";
const char* password = "spot$toulouse";

ESP8266WebServer server(80);           //Server on port 80

//===============================================================
void handleRoot() {
 String s = MAIN_page; //Read HTML contents
 server.send(200, "text/html", s); //Send web page
}

  void states() {
server.send(200,"text/plane","{ \"t0\":"+String(tank0)+", \"m0\":\""+M0+"\", \"t1\":"+String(tank1)+", \"m1\":\""+M1+"\", \"m2\":\""+M2+"\", \"m3\":\""+M3+"\" }");
}

void setload() {
 t_state = server.arg("loadstate"); //Refer  xhttp.open("GET", "setLED?LEDstate="+led, true);
 t = t_state.toInt();
switch (t){
     case 1: if(M0=="OFF")
              {
              digitalWrite(L0,HIGH); //LED ON
              M0 = "ON";             //Feedback parameter
              Serial.println("M0 ON");
              }
              else
              {
              digitalWrite(L0,LOW); //LED OFF
              M0 = "OFF"; //Feedback parameter  
              Serial.println("M0 OFF");
              }
        break;
     case 2:if(t_state == "2" && M1=="OFF")
            {
            digitalWrite(L1,HIGH); //LED ON
            M1 = "ON";             //Feedback parameter
            Serial.println("M1 ON");
            }
            else
            {
            digitalWrite(L1,LOW); //LED OFF
            M1 = "OFF"; //Feedback parameter  
            Serial.println("M1 OFF");
            }  
        break;
     case 3:if(t_state == "3" && M2=="OFF")
               {
               digitalWrite(L2,HIGH); //LED ON
               M2 = "ON";             //Feedback parameter
              Serial.println("M2 ON");
              }
              else
              {
               digitalWrite(L2,LOW); //LED OFF
               M2 = "OFF"; //Feedback parameter  
               Serial.println("M2 OFF");
               }
        break;
     case 4:if(t_state == "4" && M3=="OFF")
            {
            digitalWrite(L3,HIGH); //LED ON
            M3 = "ON";             //Feedback parameter
            Serial.println("M3 ON");
            }
            else
            {
            digitalWrite(L3,LOW); //LED OFF
            M3 = "OFF"; //Feedback parameter  
            Serial.println("M3 OFF");
            }
        break;
            }
 
server.send(200,"text/plane","{ \"t0\":"+String(tank0)+", \"m0\":\""+M0+"\", \"t1\":"+String(tank1)+", \"m1\":\""+M1+"\", \"m2\":\""+M2+"\", \"m3\":\""+M3+"\" }");
}


void setup(){
  Serial.begin(115200);
  WiFi.begin(ssid, password);     //Connect to your WiFi router
  Serial.println("");
  pinMode(L0, OUTPUT);
  pinMode(L1, OUTPUT);
  pinMode(L2, OUTPUT);
  pinMode(L3, OUTPUT);
  while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
        }
  Serial.println("");
  Serial.print("Connected to ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());        //IP address assigned to your ESP
  server.on("/", handleRoot);           //Which routine to handle at root location. This is display page
  server.on("/getstatus", states);
  server.on("/setLoad", setload);
  server.begin();                       //Start server
  Serial.println("HTTP server started");
  }

  void loop(){
unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
      previousMillis = currentMillis;
      tank0 = usread(10);
      tank1 = usread(16);    //Read the ultrasonic sensor reading for tank1
  }
  server.handleClient();          //Handle client requests
  
  if(tank0<=16){
    digitalWrite(L0,LOW);
    M0="OFF";
   }
  if(tank0>86){
          digitalWrite(L0,HIGH);
        M0="ON";
    }
  if(tank0  <13||tank0>89){
    error++;
    }
    //tank1
  if(tank1<=16){
    digitalWrite(L1,LOW);
    M1="OFF";
   }
  if(tank1>86){
          digitalWrite(L1,HIGH);
        M1="ON";
    }
  if(tank1<13||tank1>89){
    error++;
    }
  } 
 
int usread(int trig){    
  pinMode(trig, OUTPUT);//taking hc sr04 sensor reading for more refer data sheet of hc-sr04
  digitalWrite(trig, LOW);
  delayMicroseconds(5);
  digitalWrite(trig, HIGH);
  delayMicroseconds(12);
  digitalWrite(trig, LOW);
  pinMode(trig, INPUT);
  long duration = pulseIn(trig, HIGH);
  return duration / 29 / 2;      //coverting pulse length to cm
}