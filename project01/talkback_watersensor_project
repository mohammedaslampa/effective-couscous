/*
  AnalogReadSerial

 /*
WiFi
FetchCommandFromTalkBack

Description: Checks a TalkBack queue every 60 seconds and sets the state of the built-in LED according
             to the latest command fetched. Turn the LED on and off by using the commands TURN_ON and TURN_OFF.
             The TalkBack documentation can be found at https://www.mathworks.com/help/thingspeak/talkback-app.html.
             
Hardware: ESP8266-based boards

Copyright 2018, The MathWorks, Inc.
*/


#include <ESP8266WiFi.h>

char ssid[] = "BSNL_AP";   // your network SSID (name) 
char pass[] = "spot$toulouse";   // your network password

const long interval = 10000;           // interval at which to blink (milliseconds)
unsigned long previousMillis = 0;        // will store last time LED was updated
int tank0;
bool L = 0,H = 0;
const int trigpin = 13;
const int Hipin = 5;
const int LOpin = 10;

WiFiClient  client;

unsigned long myTalkBackID = 37422;
const char * myTalkBackKey = "UZ6TCEH5DWTWY9ID";

#define MOTOR 12

void setup() {
  pinMode(MOTOR, OUTPUT);  // Set up MOTOR
  Serial.begin(115200);          // Initialize serial
  pinMode(Hipin,INPUT);
  pinMode(LOpin,INPUT);
}

void loop() {
  tank0 = usread(trigpin);
  H = digitalRead(Hipin);
  L = digitalRead(LOpin);

  if(tank0<=9 || H == 0){
    digitalWrite(MOTOR,LOW);
   }
  if(tank0>23 || L == 1){
          digitalWrite(MOTOR,HIGH);
    }
    delay(100);
  unsigned long currentMillis = millis();
if (currentMillis - previousMillis >= interval) {
    // save the last time you blinked the LED
    previousMillis = currentMillis;

  // Connect or reconnect to Wi-Fi
  if(WiFi.status() != WL_CONNECTED){
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(String(ssid));
    while(WiFi.status() != WL_CONNECTED){
      WiFi.begin(ssid, pass);  
      Serial.print(".");
      delay(100);     
    }
    Serial.println("\nConnected.");
  }

  // Create the TalkBack URI
  String tbURI = String("/talkbacks/") + String(myTalkBackID) + String("/commands/execute");
  
  // Create the message body for the POST out of the values
  String postMessage =  String("api_key=") + String(myTalkBackKey);                      
                       
   // Make a string for any commands that might be in the queue
  String newCommand = String();

  // Make the POST to ThingSpeak
  int x = httpPOST(tbURI, postMessage, newCommand);
  client.stop();
  
  // Check the result
  if(x == 200){
    Serial.println("checking queue..."); 
    // Check for a command returned from TalkBack
    if(newCommand.length() != 0){

      Serial.print("  Latest command from queue: ");
      Serial.println(newCommand);

      if(newCommand.substring(3,10) == "TURN_ON"){
        digitalWrite(MOTOR, HIGH);  
        Serial.println("led on");
      }

      if(newCommand.substring(3,11) == "TURN_OFF"){
        digitalWrite(MOTOR, LOW);
        Serial.println("led TURN_OFF");
      }
    }
    else{
      Serial.println("  Nothing new.");  
    }
    
  }
  else{
    Serial.println("Problem checking queue. HTTP error code " + String(x));
  }

  
  //delay(10000); // Wait 10 seconds to check queue again
}

// General function to POST to ThingSpeak

}

int httpPOST(String uri, String postMessage, String &response){//////////////////////////////////////func

  bool connectSuccess = false;
  connectSuccess = client.connect("api.thingspeak.com",80);

  if(!connectSuccess){
      return -301;   
  }
  
  postMessage += "&headers=false";
  
  String Headers =  String("POST ") + uri + String(" HTTP/1.1\r\n") +
                    String("Host: api.thingspeak.com\r\n") +
                    String("Content-Type: application/x-www-form-urlencoded\r\n") +
                    String("Connection: close\r\n") +
                    String("Content-Length: ") + String(postMessage.length()) +
                    String("\r\n\r\n");

  client.print(Headers);
  client.print(postMessage);

  long startWaitForResponseAt = millis();
  while(client.available() == 0 && millis() - startWaitForResponseAt < 5000){
      delay(100);
  }

  if(client.available() == 0){       
    return -304; // Didn't get server response in time
  }

  if(!client.find(const_cast<char *>("HTTP/1.1"))){
      return -303; // Couldn't parse response (didn't find HTTP/1.1)
  }
  
  int status = client.parseInt();
  if(status != 200){
    return status;
  }

  if(!client.find(const_cast<char *>("\n\r\n"))){
    return -303;
  }

  String tempString = String(client.readString());
  tempString.trim();
  response = tempString;
  
  return status;
    

  }

int usread(int trig){       //taking hc sr04 sensor reading for more refer data sheet of hc-sr04
  pinMode(trig,OUTPUT);
  digitalWrite(trig, LOW);
  delayMicroseconds(2);
  digitalWrite(trig, HIGH);
  delayMicroseconds(5);
  digitalWrite(trig, LOW);
  pinMode(trig,INPUT);
  long duration = pulseIn(trig, HIGH);
  return duration / 29 / 2;      //coverting pulse length to cm
}
