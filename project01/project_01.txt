/*
  WriteMultipleFields
  
  Description: Writes values to fields 1,2,3,4 and status in a single ThingSpeak update every 20 seconds.
  
  Hardware: ESP8266 based boards
  
  !!! IMPORTANT - Modify the secrets.h file for this project with your network connection and ThingSpeak channel details. !!!
  
  Note:
  - Requires ESP8266WiFi library and ESP8622 board add-on. See https://github.com/esp8266/Arduino for details.
  - Select the target hardware from the Tools->Board menu
  - This example is written for a network using WPA encryption. For WEP or WPA, change the WiFi.begin() call accordingly.
  
  ThingSpeak ( https://www.thingspeak.com ) is an analytic IoT platform service that allows you to aggregate, visualize, and 
  analyze live data streams in the cloud. Visit https://www.thingspeak.com to sign up for a free account and create a channel.  
  
  Documentation for the ThingSpeak Communication Library for Arduino is in the README.md folder where the library was installed.
  See https://www.mathworks.com/help/thingspeak/index.html for the full ThingSpeak documentation.
  
  For licensing information, see the accompanying license file.
  
  Copyright 2018, The MathWorks, Inc.
*/

#include "ThingSpeak.h"
#include "secrets.h"
#include <ESP8266WiFi.h>
#include <Wire.h>
#include <ESP8266mDNS.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>
#include <Adafruit_INA219.h>

WiFiClient  client;
Adafruit_INA219 ina219;

char ssid[] = SECRET_SSID;   // your network SSID (name) 
char pass[] = SECRET_PASS;   // your network password

int keyIndex = 0;            // your network key Index number (needed only for WEP)
unsigned long myChannelNumber = SECRET_CH_ID;
const char * myWriteAPIKey = SECRET_WRITE_APIKEY;
String myStatus = "";

const int srelay = 16;
bool solar;
const int brelay = 0;
bool battery;
const int lrelay = 12;
bool load;
const int grelay = 13;
bool grid;
const int OTApin = 14;
const int wifistatus = 15;
const int updatestatus = 2;
unsigned long previousMillis = 0;        // will store last time LED was updated
const long interval = 20000;           // interval at which to blink (milliseconds)

float shuntvoltage = 0;
float busvoltage = 0;
float current_mA = 0;
float loadvoltage = 0;
float power_mW = 0;

void setup() {
  Serial.begin(115200);
  uint32_t currentFrequency;
  ina219.begin();
  ina219.setCalibration_16V_400mA(); 
  pinMode(OTApin,INPUT);
  if (digitalRead(OTApin) == HIGH){
     Serial.println("Booting");
     WiFi.mode(WIFI_STA);
     WiFi.begin(SECRET_SSID, SECRET_PASS);
     while (WiFi.waitForConnectResult() != WL_CONNECTED) {
       Serial.println("Connection Failed! Rebooting...");
       delay(5000);
       ESP.restart();
     }

     // Port defaults to 8266
     // ArduinoOTA.setPort(8266);
 
     // Hostname defaults to esp8266-[ChipID]
     // ArduinoOTA.setHostname("myesp8266");

     // No authentication by default
      ArduinoOTA.setPassword((const char *)"M$A%pa@20/3");
  
     ArduinoOTA.onStart([]() {
       Serial.println("Start");
     });
     ArduinoOTA.onEnd([]() {
       Serial.println("End");
     });
     ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
       Serial.printf("Progress: %u%%\n", (progress / (total / 100)));
     });
     ArduinoOTA.onError([](ota_error_t error) {
       Serial.printf("Error[%u]: ", error);
       if (error == OTA_AUTH_ERROR) Serial.println("Auth Failed");
       else if (error == OTA_BEGIN_ERROR) Serial.println("Begin Failed");
       else if (error == OTA_CONNECT_ERROR) Serial.println("Connect Failed");
       else if (error == OTA_RECEIVE_ERROR) Serial.println("Receive Failed");
       else if (error == OTA_END_ERROR) Serial.println("End Failed");
     });
     ArduinoOTA.begin();
     Serial.println("Ready");
     Serial.print("IP address: ");
     Serial.println(WiFi.localIP());
     }
     else {
      WiFi.mode(WIFI_STA); 
      ThingSpeak.begin(client);  // Initialize ThingSpeak
      pinMode(srelay,OUTPUT);
      pinMode(wifistatus,OUTPUT);
      pinMode(updatestatus,OUTPUT);
      pinMode(brelay,OUTPUT);
      pinMode(lrelay,OUTPUT);
      pinMode(grelay,OUTPUT);
      digitalWrite(srelay,LOW);
      solar = 1;
      digitalWrite(brelay,LOW);
      battery = 1;
      digitalWrite(lrelay,HIGH);
      load = 0;
      digitalWrite(grelay,HIGH);
      grid = 0;
      digitalWrite(updatestatus,HIGH);
      digitalWrite(wifistatus,HIGH);
     }

}

void loop() {
  if (digitalRead(OTApin) == HIGH){
      ArduinoOTA.handle();
  }
  else{
  unsigned long currentMillis = millis();
  shuntvoltage = ina219.getShuntVoltage_mV();
  busvoltage = ina219.getBusVoltage_V();
  current_mA = ina219.getCurrent_mA();
  power_mW = ina219.getPower_mW();
  loadvoltage = busvoltage + (shuntvoltage / 1000);
  if (busvoltage >14){
    digitalWrite(srelay,HIGH);
    digitalWrite(grelay, HIGH);
    digitalWrite(lrelay,LOW);
    solar =0;
    grid = 0;
    load = 1;
  }
  if (busvoltage <12.3){
    digitalWrite(grelay, LOW);
    grid = 1;
  }
  else if (busvoltage >12.7){
    digitalWrite(grelay, HIGH);
    grid = 0;
  }
  if (current_mA > abs(1500)){
    digitalWrite(lrelay, HIGH);
    load = 0;
  }
 // Serial.print("Bus Voltage:   "); Serial.print(busvoltage); Serial.println(" V");
  //Serial.print("Shunt Voltage: "); Serial.print(shuntvoltage); Serial.println(" mV");
  //Serial.print("Load Voltage:  "); Serial.print(loadvoltage); Serial.println(" V");
  //Serial.print("Current:       "); Serial.print(current_mA); Serial.println(" mA");
  ///Serial.print("Power:         "); Serial.print(power_mW); Serial.println(" mW");
  //Serial.println("");
    if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
  // Connect or reconnect to WiFi
  if(WiFi.status() != WL_CONNECTED){
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(SECRET_SSID);
    while(WiFi.status() != WL_CONNECTED){
      digitalWrite(wifistatus,HIGH);
      WiFi.begin(ssid, pass);  // Connect to WPA/WPA2 network. Change this line if using open or WEP network
      Serial.print(".");
      delay(5000);     
    } 
    Serial.println("\nConnected.");
    digitalWrite(wifistatus,LOW);
  }

  // set the fields with the values
  ThingSpeak.setField(1, current_mA);
  ThingSpeak.setField(2, loadvoltage);
  ThingSpeak.setField(3, power_mW);
  ThingSpeak.setField(4, shuntvoltage);
  ThingSpeak.setField(5, solar);
  ThingSpeak.setField(6, grid);
  ThingSpeak.setField(7, load);


    myStatus = String("OK"); 

  
  // set the status
  ThingSpeak.setStatus(myStatus);
  
  // write to the ThingSpeak channel
  int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
  if(x == 200){
    Serial.println("Channel update successful.");
    digitalWrite(updatestatus,HIGH);
  }
  else{
    Serial.println("Problem updating channel. HTTP error code " + String(x));
    digitalWrite(updatestatus,LOW);
  }

    }}
}
